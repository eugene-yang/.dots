#!/usr/bin/python3
import argparse
import json
import sys
from pathlib import Path

import subprocess
import sys
import logging

logging.basicConfig(format='%(asctime)s %(message)s')
logging.basicConfig(format='[%(levelname)s %(asctime)s Remote qrsh kernel] %(message)s', level=logging.DEBUG)

def main(args):
    config = json.load(open(args.connection_file))
    port_names = ["control_port", "shell_port", "stdin_port", "hb_port", "iopub_port"]

    kernel_start = f"{args.client_hook} {args.remote_python_path} -m ipykernel_launcher -f {args.connection_file}"


    connect = f'qrsh -N {args.task_name} -q {args.queue} -l {args.resource} -now no -cwd ' + kernel_start
    proc = subprocess.Popen(connect.split(), stdin=sys.stdin, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    try:
        forwarding_procs = []
        forwarding = False
        for line in proc.stdout:
            line = line.decode()
            if not forwarding and line.startswith("r"):
                remote_server = line.strip()
                for pn in port_names:
                    print(f"forwarding port {config[pn]} for {pn}  from server {remote_server}")
                    forwarding_procs.append( subprocess.Popen(f"ssh -N -L {config[pn]}:localhost:{config[pn]} {remote_server}".split(), stderr=subprocess.PIPE) )
            else:
                print(line, end="")
    except Exception as e:
        logging.error(repr(e))
    finally:
        for p in forwarding_procs:
            print(f"Terminate port forwarding process {p}")
            p.terminate()

if __name__ == '__main__':
    parser = argparse.ArgumentParser("Remote ipykernel lanucher via qrsh")

    parser.add_argument('--remote_python_path', type=str, required=True) # e.g.  /home/hltcoe/eyang/.conda/envs/pretrain-wfaiss/bin/python3
    parser.add_argument('--task_name', type=str, default='ipkproxy')
    parser.add_argument('--queue', type=str, default='all.q') # e.g. gpu.q@@dgx
    parser.add_argument('--resource', type=str, default='h_rt=24:00:00') # e.g. h_rt=400:00:00,mem_free=100G,num_proc=4,gpu=1

    parser.add_argument('--client_hook', type=str, default=str(Path(__file__).parent / "qrsh_ipykernel_client"))
    parser.add_argument('--connection_file', type=str, required=True)

    main(parser.parse_args())

